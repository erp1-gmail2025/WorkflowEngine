// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkflowAPI.Data;

#nullable disable

namespace WorkflowAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250623012005_First Init Data")]
    partial class FirstInitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WorkflowAPI.Models.ActionTarget", b =>
                {
                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.Property<int>("TargetID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("ActionID", "TargetID", "GroupID");

                    b.HasIndex("GroupID");

                    b.HasIndex("TargetID");

                    b.ToTable("ActionTargets");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActionType", b =>
                {
                    b.Property<int>("ActionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActionTypeID");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityID"));

                    b.Property<int>("ActivityTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.HasKey("ActivityID");

                    b.HasIndex("ActivityTypeID");

                    b.HasIndex("ProcessID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActivityTarget", b =>
                {
                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.Property<int>("TargetID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("ActivityID", "TargetID", "GroupID");

                    b.HasIndex("GroupID");

                    b.HasIndex("TargetID");

                    b.ToTable("ActivityTargets");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityTypeID");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("WorkflowAPI.Models.CustomEntity", b =>
                {
                    b.Property<int>("CustomEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomEntityID"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessID")
                        .HasColumnType("int");

                    b.HasKey("CustomEntityID");

                    b.HasIndex("ProcessID");

                    b.ToTable("CustomEntities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Group", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("WorkflowAPI.Models.GroupMember", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "GroupID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Process", b =>
                {
                    b.Property<int>("ProcessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProcessID");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ProcessAdmin", b =>
                {
                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProcessID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ProcessAdmins");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("CurrentStateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("CurrentStateID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("UserID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestAction", b =>
                {
                    b.Property<int>("RequestActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestActionID"));

                    b.Property<int?>("ActionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("TransitionID")
                        .HasColumnType("int");

                    b.HasKey("RequestActionID");

                    b.HasIndex("ActionID");

                    b.HasIndex("RequestID");

                    b.HasIndex("TransitionID");

                    b.ToTable("RequestActions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestData", b =>
                {
                    b.Property<int>("RequestDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestDataID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestDataID");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestData");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestFile", b =>
                {
                    b.Property<int>("RequestFileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestFileID"));

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MIMETYPE")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestFileID");

                    b.HasIndex("RequestID");

                    b.HasIndex("UserID");

                    b.ToTable("RequestFiles");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestNote", b =>
                {
                    b.Property<int>("RequestNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestNoteID"));

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestNoteID");

                    b.HasIndex("RequestID");

                    b.HasIndex("UserID");

                    b.ToTable("RequestNotes");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestStakeholder", b =>
                {
                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("RequestStakeholders");
                });

            modelBuilder.Entity("WorkflowAPI.Models.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.Property<int>("StateOrder")
                        .HasColumnType("int");

                    b.Property<int>("StateTypeID")
                        .HasColumnType("int");

                    b.HasKey("StateID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StateTypeID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WorkflowAPI.Models.StateType", b =>
                {
                    b.Property<int>("StateTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateTypeID"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateTypeID");

                    b.ToTable("StateTypes");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Target", b =>
                {
                    b.Property<int>("TargetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TargetID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TargetID");

                    b.ToTable("Targets");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Transition", b =>
                {
                    b.Property<int>("TransitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransitionID"));

                    b.Property<int>("CurrentStateID")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<int>("NextStateID")
                        .HasColumnType("int");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.HasKey("TransitionID");

                    b.HasIndex("CurrentStateID");

                    b.HasIndex("NextStateID");

                    b.HasIndex("ProcessID");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.TransitionAction", b =>
                {
                    b.Property<int>("TransitionID")
                        .HasColumnType("int");

                    b.Property<int>("ActionID")
                        .HasColumnType("int");

                    b.HasKey("TransitionID", "ActionID");

                    b.HasIndex("ActionID");

                    b.ToTable("TransitionActions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.TransitionActivity", b =>
                {
                    b.Property<int>("TransitionID")
                        .HasColumnType("int");

                    b.Property<int>("ActivityID")
                        .HasColumnType("int");

                    b.HasKey("TransitionID", "ActivityID");

                    b.HasIndex("ActivityID");

                    b.ToTable("TransitionActivities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkflowAPI.Models.WorkflowAction", b =>
                {
                    b.Property<int>("WorkflowActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkflowActionID"));

                    b.Property<int>("ActionTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProcessID")
                        .HasColumnType("int");

                    b.HasKey("WorkflowActionID");

                    b.HasIndex("ActionTypeID");

                    b.HasIndex("ProcessID");

                    b.ToTable("WorkflowActions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActionTarget", b =>
                {
                    b.HasOne("WorkflowAPI.Models.WorkflowAction", "Action")
                        .WithMany("ActionTargets")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Group", "Group")
                        .WithMany("ActionTargets")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Target", "Target")
                        .WithMany("ActionTargets")
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Group");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Activity", b =>
                {
                    b.HasOne("WorkflowAPI.Models.ActivityType", "ActivityType")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany("Activities")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityType");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActivityTarget", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Activity", "Activity")
                        .WithMany("ActivityTargets")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Group", "Group")
                        .WithMany("ActivityTargets")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Target", "Target")
                        .WithMany("ActivityTargets")
                        .HasForeignKey("TargetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Group");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("WorkflowAPI.Models.CustomEntity", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessID");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowAPI.Models.GroupMember", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ProcessAdmin", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany("Admins")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("ProcessAdmins")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Request", b =>
                {
                    b.HasOne("WorkflowAPI.Models.State", "CurrentState")
                        .WithMany("Requests")
                        .HasForeignKey("CurrentStateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany("Requests")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("Process");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestAction", b =>
                {
                    b.HasOne("WorkflowAPI.Models.WorkflowAction", "Action")
                        .WithMany("RequestActions")
                        .HasForeignKey("ActionID");

                    b.HasOne("WorkflowAPI.Models.Request", "Request")
                        .WithMany("RequestActions")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Transition", "Transition")
                        .WithMany("RequestActions")
                        .HasForeignKey("TransitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Request");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestData", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Request", "Request")
                        .WithMany("RequestData")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestFile", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Request", "Request")
                        .WithMany("RequestFiles")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("RequestFiles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestNote", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Request", "Request")
                        .WithMany("RequestNotes")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("RequestNotes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.RequestStakeholder", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Request", "Request")
                        .WithMany("RequestStakeholders")
                        .HasForeignKey("RequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.User", "User")
                        .WithMany("RequestStakeholders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WorkflowAPI.Models.State", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Process", null)
                        .WithMany("States")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.StateType", "StateType")
                        .WithMany("States")
                        .HasForeignKey("StateTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StateType");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Transition", b =>
                {
                    b.HasOne("WorkflowAPI.Models.State", "CurrentState")
                        .WithMany("TransitionsFrom")
                        .HasForeignKey("CurrentStateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.State", "NextState")
                        .WithMany("TransitionsTo")
                        .HasForeignKey("NextStateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany("Transitions")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentState");

                    b.Navigation("NextState");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowAPI.Models.TransitionAction", b =>
                {
                    b.HasOne("WorkflowAPI.Models.WorkflowAction", "Action")
                        .WithMany("TransitionActions")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Transition", "Transition")
                        .WithMany("TransitionActions")
                        .HasForeignKey("TransitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("WorkflowAPI.Models.TransitionActivity", b =>
                {
                    b.HasOne("WorkflowAPI.Models.Activity", "Activity")
                        .WithMany("TransitionActivities")
                        .HasForeignKey("ActivityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Transition", "Transition")
                        .WithMany("TransitionActivities")
                        .HasForeignKey("TransitionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Transition");
                });

            modelBuilder.Entity("WorkflowAPI.Models.WorkflowAction", b =>
                {
                    b.HasOne("WorkflowAPI.Models.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowAPI.Models.Process", "Process")
                        .WithMany("Actions")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActionType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Activity", b =>
                {
                    b.Navigation("ActivityTargets");

                    b.Navigation("TransitionActivities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.ActivityType", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Group", b =>
                {
                    b.Navigation("ActionTargets");

                    b.Navigation("ActivityTargets");

                    b.Navigation("GroupMembers");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Process", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Activities");

                    b.Navigation("Admins");

                    b.Navigation("Requests");

                    b.Navigation("States");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Request", b =>
                {
                    b.Navigation("RequestActions");

                    b.Navigation("RequestData");

                    b.Navigation("RequestFiles");

                    b.Navigation("RequestNotes");

                    b.Navigation("RequestStakeholders");
                });

            modelBuilder.Entity("WorkflowAPI.Models.State", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("TransitionsFrom");

                    b.Navigation("TransitionsTo");
                });

            modelBuilder.Entity("WorkflowAPI.Models.StateType", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Target", b =>
                {
                    b.Navigation("ActionTargets");

                    b.Navigation("ActivityTargets");
                });

            modelBuilder.Entity("WorkflowAPI.Models.Transition", b =>
                {
                    b.Navigation("RequestActions");

                    b.Navigation("TransitionActions");

                    b.Navigation("TransitionActivities");
                });

            modelBuilder.Entity("WorkflowAPI.Models.User", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("ProcessAdmins");

                    b.Navigation("RequestFiles");

                    b.Navigation("RequestNotes");

                    b.Navigation("RequestStakeholders");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("WorkflowAPI.Models.WorkflowAction", b =>
                {
                    b.Navigation("ActionTargets");

                    b.Navigation("RequestActions");

                    b.Navigation("TransitionActions");
                });
#pragma warning restore 612, 618
        }
    }
}
